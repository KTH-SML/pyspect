on:
  workflow_dispatch:
  push:
    tags: ["v*"]   # release on tags like v0.1.0

name: Publish pyspect to PyPI

on:
  workflow_dispatch:
  push:
    tags: ["v*"]   # release on tags like v0.1.0

name: Publish pyspect to PyPI


jobs:
  build:
    name: Build package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0          # ensure git metadata is present for hatch-vcs
          fetch-tags: true

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Build a binary wheel and a source tarball
        run: uv build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: pyspect
          path: dist/

  publish:
    name: Publish to PyPI
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')   # publish only on tag events
    environment:
      name: pypi
      url: https://pypi.org/p/pyspect
    permissions:
      id-token: write  # for PyPI Trusted Publishing (OIDC)

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: pyspect
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  release:
    name: Sign dists with Sigstore and create GitHub Release
    needs: [publish]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')   # only for tag events
    permissions:
      contents: write  # create GitHub Releases
      id-token: write  # sigstore OIDC

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: pyspect
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release (auto notes)
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # Optional: compute previous tag so notes only cover the new range.
          PREV="$(git describe --tags --abbrev=0 "$(git rev-list --tags --max-count=1 --skip=1)" 2>/dev/null || true)"
          START_FLAG=""
          if [ -n "$PREV" ]; then
            START_FLAG="--notes-start-tag $PREV"
          fi

          gh release create \
            "$GITHUB_REF_NAME" \
            --repo "$GITHUB_REPOSITORY" \
            --generate-notes $START_FLAG \
            --draft

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"
